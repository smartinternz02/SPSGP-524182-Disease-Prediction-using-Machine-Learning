# -*- coding: utf-8 -*-
"""SmartBridge_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14X3mHQHbYf50bEl0c1p7NtI5PGwWV_ud
"""

import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.model_selection import cross_val_score, GridSearchCV
from sklearn.metrics import classification_report, accuracy_score, precision_score, recall_score, f1_score, roc_auc_score
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import LabelEncoder
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split

df = pd.read_csv('/content/Training.csv')
df.drop('Unnamed: 133', axis=1, inplace=True)

df

print(df.describe())
print('---------------------------------------------------------------')
print(df.info())
print('---------------------------------------------------------------')
print(df.columns)
print('---------------------------------------------------------------')

df.isnull().sum()

df['prognosis'].value_counts()

import matplotlib.pyplot as plt
plt.figure(figsize=(90, 50))

category_counts = df['prognosis'].value_counts()


plt.pie(category_counts, labels=category_counts.index,  autopct='%1.1f%%', shadow=True, startangle=90)

plt.title('Prognosis Distribution', fontsize=16, fontweight='bold')
plt.legend(category_counts.index, loc='best', fontsize=50)
plt.axis('equal')

plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns


# Compute correlation matrix
corr_matrix = df.corr()

# Create a heatmap of the correlation matrix
plt.figure(figsize=(100, 80))
sns.heatmap(corr_matrix, annot=True, cmap='RdYlBu')
plt.title('Correlation Heatmap')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Assuming you have a DataFrame named 'df'

# Get the number of columns (excluding 'prognosis')
num_columns = len(df.columns) - 1

# Calculate the number of rows and columns for the subplots grid
num_rows = int((num_columns + 2) / 3)  # Adjust the number of rows as needed
num_cols = 3  # Set the number of columns per row

# Calculate the figure size based on the number of rows and columns
fig_width = 16
fig_height = 6 * num_rows

# Create the subplots
fig, axes = plt.subplots(num_rows, num_cols, figsize=(fig_width, fig_height))

# Flatten the axes array
axes = axes.flatten()

# Iterate over the columns (excluding 'prognosis') and create the bar plots
for i, column in enumerate(df.columns):
    if column != 'prognosis':
        cross_tab = pd.crosstab(df['prognosis'], df[column])
        ax = axes[i]

        cross_tab.plot(kind='bar', stacked=True, ax=ax)
        ax.set_title(f"Cross-Tabulation between 'prognosis' and '{column}'")
        ax.set_xlabel('Prognosis')
        ax.set_ylabel('Count')

# Hide the extra subplots if there are more axes than columns
if len(axes) > num_columns:
    for ax in axes[num_columns:]:
        ax.axis('off')

# Adjust the spacing between subplots
plt.tight_layout(pad=1.5)

# Display the plot
plt.show()

from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()
df["prognosis"] = le.fit_transform(df["prognosis"])

numerical_columns = df.select_dtypes(include=['int64', 'float64']).columns

z_scores = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

# Define threshold for outlier detection
threshold = 3

# Identify outliers
outliers = (np.abs(z_scores) > threshold).any(axis=1)

# Print the number of outliers
print("Number of outliers:", outliers.sum())

# Remove outliers
data_no_outliers = df[~outliers]

data_no_outliers



from sklearn.feature_selection import RFE
from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier()

X = df.drop('prognosis', axis=1)  # Assuming 'Disease' is the target variable
y = df['prognosis']
# Create an RFE object and specify the desired number of features to select
num_features = 50  # Specify the desired number of features to select
rfe = RFE(estimator=model, n_features_to_select=num_features , step = 1)

# Perform feature selection
rfe.fit(X, y)
X_selected = rfe.transform(X)

# Get the selected feature names
selected_features = X.columns[rfe.support_]
print("Selected features:")
print(selected_features)

import pandas as pd
from sklearn.model_selection import cross_val_score
from sklearn.feature_selection import RFE
from sklearn.ensemble import RandomForestClassifier

num_features_list = [65, 60, 70]

# Define the machine learning model
model = RandomForestClassifier()

# Perform cross-validation for each number of features
results = []
for num_features in num_features_list:
    # Create an RFE object and specify the desired number of features to select
    rfe = RFE(estimator=model, n_features_to_select=num_features)

    # Apply feature selection on the entire dataset
    X_selected = rfe.fit_transform(X, y)

    # Perform cross-validation and compute the performance metric
    scores = cross_val_score(model, X_selected, y, cv=5, scoring='accuracy')
    avg_score = scores.mean()

    # Store the results
    results.append((num_features, avg_score))

# Print the results
for num_features, avg_score in results:
    print(f"Number of features: {num_features}, Average Accuracy: {avg_score}")

# Find the best number of features
best_num_features = max(results, key=lambda x: x[1])[0]
print(f"\nBest number of features: {best_num_features}")

"""#### Applying feature selection Algorithm - Fisher"""

df.size

import numpy as np

def relief(X, y, k=5, num_features=30):
    n_samples, n_features = X.shape
    feature_scores = np.zeros(n_features)
    for i in range(n_samples):
        distances = np.sum(np.square(X[i, :] - X), axis=1)
        nn_indices = np.argsort(distances)[1:k+1]
        for j in range(n_features):
            feature_scores[j] -= np.square(X[i, j] - X[nn_indices, j]).sum() / k
            if y[i] != y[nn_indices[0]]:
                feature_scores[j] += 2 * np.abs(X[i, j] - X[nn_indices[0], j]) / k
            if y[i] == y[nn_indices[0]]:
                feature_scores[j] -= 2 * np.abs(X[i, j] - X[nn_indices[0], j]) / k
    top_features = np.argsort(feature_scores)[:num_features]
    return feature_scores, top_features

X=X.to_numpy(dtype=int)
y=y.to_numpy(dtype=int)

"""### Selecting 50 features"""

feature_scores, top_features = relief(X, y,k=5,num_features=50)

print("Top features:", df.columns[top_features])

df_rilief_50=df.loc[:,['itching', 'irritability', 'depression', 'toxic_look_(typhos)',
       'internal_itching', 'passage_of_gases', 'continuous_feel_of_urine',
       'foul_smell_of urine', 'bladder_discomfort', 'loss_of_smell',
       'weakness_of_one_body_side', 'unsteadiness', 'loss_of_balance',
       'spinning_movements', 'movement_stiffness', 'swelling_joints',
       'stiff_neck', 'muscle_weakness', 'hip_joint_pain', 'knee_pain',
       'slurred_speech', 'drying_and_tingling_lips', 'extra_marital_contacts',
       'excessive_hunger', 'swollen_extremeties', 'brittle_nails',
       'enlarged_thyroid', 'puffy_face_and_eyes', 'swollen_blood_vessels',
       'swollen_legs', 'muscle_pain', 'obesity', 'altered_sensorium',
       'belly_pain', 'blister', 'inflammatory_nails', 'small_dents_in_nails',
       'silver_like_dusting', 'skin_peeling', 'scurring', 'blackheads',
       'pus_filled_pimples', 'painful_walking', 'palpitations',
       'prominent_veins_on_calf', 'blood_in_sputum', 'fluid_overload.1',
       'history_of_alcohol_consumption', 'distention_of_abdomen',
       'stomach_bleeding']]

from sklearn.model_selection import train_test_split
from sklearn import preprocessing
from sklearn import svm
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier

"""### SVM"""

clf = svm.SVC(kernel='linear', C=1)
X_train, X_test, y_train, y_test = train_test_split(df_rilief_50, y, test_size=0.3, random_state=0)
clf.fit(X_train, y_train)
y_pred = clf.predict(X_test)

print("Accuracy: ",clf.score(X_test,y_test))

"""### Random forest"""

forest = RandomForestClassifier()
X_train, X_test, y_train, y_test = train_test_split(df_rilief_50, y, test_size=0.3, random_state=0)
forest.fit(X_train, y_train)
forest_pred = forest.predict(X_test)
forest_acc = accuracy_score(y_test, forest_pred)

print("Random Forest Classifier:")
print("Accuracy on test set: {:.2f}%".format(forest_acc * 100))

logreg = LogisticRegression()
logreg.fit(X_train, y_train)
logreg_pred = logreg.predict(X_test)
logreg_acc = accuracy_score(y_test, logreg_pred)
logreg_confidence = logreg.predict_proba(X_test)

print("Logistic Regression Classifier:")
print("Accuracy on test set: {:.2f}%".format(logreg_acc * 100))

# Print confidence scores for Logistic Regression predictions
print("Confidence scores for Logistic Regression predictions:")
print(logreg_confidence)

tree = DecisionTreeClassifier()
tree.fit(X_train, y_train)
tree_pred = tree.predict(X_test)
tree_acc = accuracy_score(y_test, tree_pred)

print("Decision Tree Classifier:")
print("Accuracy on test set: {:.2f}%".format(tree_acc * 100))

"""### Selecting 60 features"""

feature_scores, top_features = relief(X, y,k=5,num_features=60)

print("Top features:", df.columns[top_features])

df_rilief_60=df.loc[:,['itching', 'irritability', 'depression', 'toxic_look_(typhos)',
       'internal_itching', 'passage_of_gases', 'continuous_feel_of_urine',
       'foul_smell_of urine', 'bladder_discomfort', 'loss_of_smell',
       'weakness_of_one_body_side', 'unsteadiness', 'loss_of_balance',
       'spinning_movements', 'movement_stiffness', 'swelling_joints',
       'stiff_neck', 'muscle_weakness', 'hip_joint_pain', 'knee_pain',
       'slurred_speech', 'drying_and_tingling_lips', 'extra_marital_contacts',
       'excessive_hunger', 'swollen_extremeties', 'brittle_nails',
       'enlarged_thyroid', 'puffy_face_and_eyes', 'swollen_blood_vessels',
       'swollen_legs', 'muscle_pain', 'obesity', 'altered_sensorium',
       'belly_pain', 'blister', 'inflammatory_nails', 'small_dents_in_nails',
       'silver_like_dusting', 'skin_peeling', 'scurring', 'blackheads',
       'pus_filled_pimples', 'painful_walking', 'palpitations',
       'prominent_veins_on_calf', 'blood_in_sputum', 'fluid_overload.1',
       'history_of_alcohol_consumption', 'distention_of_abdomen',
       'stomach_bleeding', 'coma', 'receiving_unsterile_injections',
       'receiving_blood_transfusion', 'visual_disturbances',
       'lack_of_concentration', 'rusty_sputum', 'mucoid_sputum',
       'family_history', 'polyuria', 'increased_appetite']]

clf = svm.SVC(kernel='linear', C=1)
X_train, X_test, y_train, y_test = train_test_split(df_rilief_60, y, test_size=0.3, random_state=0)
clf.fit(X_train, y_train)
y_pred = clf.predict(X_test)

print("Accuracy: ",clf.score(X_test,y_test))

forest = RandomForestClassifier()
X_train, X_test, y_train, y_test = train_test_split(df_rilief_60, y, test_size=0.3, random_state=0)
forest.fit(X_train, y_train)
forest_pred = forest.predict(X_test)
forest_acc = accuracy_score(y_test, forest_pred)

print("Random Forest Classifier:")
print("Accuracy on test set: {:.2f}%".format(forest_acc * 100))

logreg = LogisticRegression()
logreg.fit(X_train, y_train)
logreg_pred = logreg.predict(X_test)
logreg_acc = accuracy_score(y_test, logreg_pred)
logreg_confidence = logreg.predict_proba(X_test)

print("Logistic Regression Classifier:")
print("Accuracy on test set: {:.2f}%".format(logreg_acc * 100))

# Print confidence scores for Logistic Regression predictions
print("Confidence scores for Logistic Regression predictions:")
print(logreg_confidence)

tree = DecisionTreeClassifier()
tree.fit(X_train, y_train)
tree_pred = tree.predict(X_test)
tree_acc = accuracy_score(y_test, tree_pred)

print("Decision Tree Classifier:")
print("Accuracy on test set: {:.2f}%".format(tree_acc * 100))

"""### Selecting 70 features"""

feature_scores, top_features = relief(X, y,k=5,num_features=70)

print("Top features:", df.columns[top_features])

df_rilief_70=df.loc[:,['itching', 'irritability', 'depression', 'toxic_look_(typhos)',
       'internal_itching', 'passage_of_gases', 'continuous_feel_of_urine',
       'foul_smell_of urine', 'bladder_discomfort', 'loss_of_smell',
       'weakness_of_one_body_side', 'unsteadiness', 'loss_of_balance',
       'spinning_movements', 'movement_stiffness', 'swelling_joints',
       'stiff_neck', 'muscle_weakness', 'hip_joint_pain', 'knee_pain',
       'slurred_speech', 'drying_and_tingling_lips', 'extra_marital_contacts',
       'excessive_hunger', 'swollen_extremeties', 'brittle_nails',
       'enlarged_thyroid', 'puffy_face_and_eyes', 'swollen_blood_vessels',
       'swollen_legs', 'muscle_pain', 'obesity', 'altered_sensorium',
       'belly_pain', 'blister', 'inflammatory_nails', 'small_dents_in_nails',
       'silver_like_dusting', 'skin_peeling', 'scurring', 'blackheads',
       'pus_filled_pimples', 'painful_walking', 'palpitations',
       'prominent_veins_on_calf', 'blood_in_sputum', 'fluid_overload.1',
       'history_of_alcohol_consumption', 'distention_of_abdomen',
       'stomach_bleeding', 'coma', 'receiving_unsterile_injections',
       'receiving_blood_transfusion', 'visual_disturbances',
       'lack_of_concentration', 'rusty_sputum', 'mucoid_sputum',
       'family_history', 'polyuria', 'increased_appetite',
       'watering_from_eyes', 'dischromic _patches', 'abnormal_menstruation',
       'red_spots_over_body', 'bruising', 'cramps', 'dizziness', 'dehydration',
       'sweating', 'breathlessness']]

clf = svm.SVC(kernel='linear', C=1)
X_train, X_test, y_train, y_test = train_test_split(df_rilief_70, y, test_size=0.3, random_state=0)
clf.fit(X_train, y_train)
y_pred = clf.predict(X_test)

print("Accuracy: ",clf.score(X_test,y_test))

forest = RandomForestClassifier()
X_train, X_test, y_train, y_test = train_test_split(df_rilief_70, y, test_size=0.3, random_state=0)
forest.fit(X_train, y_train)
forest_pred = forest.predict(X_test)
forest_acc = accuracy_score(y_test, forest_pred)

print("Random Forest Classifier:")
print("Accuracy on test set: {:.2f}%".format(forest_acc * 100))

logreg = LogisticRegression()
logreg.fit(X_train, y_train)
logreg_pred = logreg.predict(X_test)
logreg_acc = accuracy_score(y_test, logreg_pred)
logreg_confidence = logreg.predict_proba(X_test)

print("Logistic Regression Classifier:")
print("Accuracy on test set: {:.2f}%".format(logreg_acc * 100))

# Print confidence scores for Logistic Regression predictions
print("Confidence scores for Logistic Regression predictions:")
print(logreg_confidence)

tree = DecisionTreeClassifier()
tree.fit(X_train, y_train)
tree_pred = tree.predict(X_test)
tree_acc = accuracy_score(y_test, tree_pred)

print("Decision Tree Classifier:")
print("Accuracy on test set: {:.2f}%".format(tree_acc * 100))

"""### Selecting 80 features"""

feature_scores, top_features = relief(X, y,k=5,num_features=80)

print("Top features:", df.columns[top_features])

df_rilief_80=df.loc[:,['itching', 'irritability', 'depression', 'toxic_look_(typhos)',
       'internal_itching', 'passage_of_gases', 'continuous_feel_of_urine',
       'foul_smell_of urine', 'bladder_discomfort', 'loss_of_smell',
       'weakness_of_one_body_side', 'unsteadiness', 'loss_of_balance',
       'spinning_movements', 'movement_stiffness', 'swelling_joints',
       'stiff_neck', 'muscle_weakness', 'hip_joint_pain', 'knee_pain',
       'slurred_speech', 'drying_and_tingling_lips', 'extra_marital_contacts',
       'excessive_hunger', 'swollen_extremeties', 'brittle_nails',
       'enlarged_thyroid', 'puffy_face_and_eyes', 'swollen_blood_vessels',
       'swollen_legs', 'muscle_pain', 'obesity', 'altered_sensorium',
       'belly_pain', 'blister', 'inflammatory_nails', 'small_dents_in_nails',
       'silver_like_dusting', 'skin_peeling', 'scurring', 'blackheads',
       'pus_filled_pimples', 'painful_walking', 'palpitations',
       'prominent_veins_on_calf', 'blood_in_sputum', 'fluid_overload.1',
       'history_of_alcohol_consumption', 'distention_of_abdomen',
       'stomach_bleeding', 'coma', 'receiving_unsterile_injections',
       'receiving_blood_transfusion', 'visual_disturbances',
       'lack_of_concentration', 'rusty_sputum', 'mucoid_sputum',
       'family_history', 'polyuria', 'increased_appetite',
       'watering_from_eyes', 'dischromic _patches', 'abnormal_menstruation',
       'red_spots_over_body', 'bruising', 'cramps', 'dizziness', 'dehydration',
       'sweating', 'breathlessness', 'sunken_eyes', 'high_fever', 'cough',
       'irregular_sugar_level', 'patches_in_throat', 'lethargy',
       'restlessness', 'weight_loss', 'mood_swings', 'cold_hands_and_feets']]

clf = svm.SVC(kernel='linear', C=1)
X_train, X_test, y_train, y_test = train_test_split(df_rilief_80, y, test_size=0.3, random_state=0)
clf.fit(X_train, y_train)
y_pred = clf.predict(X_test)

print("Accuracy: ",clf.score(X_test,y_test))

forest = RandomForestClassifier()
X_train, X_test, y_train, y_test = train_test_split(df_rilief_80, y, test_size=0.3, random_state=0)
forest.fit(X_train, y_train)
forest_pred = forest.predict(X_test)
forest_acc = accuracy_score(y_test, forest_pred)

print("Random Forest Classifier:")
print("Accuracy on test set: {:.2f}%".format(forest_acc * 100))

logreg = LogisticRegression()
logreg.fit(X_train, y_train)
logreg_pred = logreg.predict(X_test)
logreg_acc = accuracy_score(y_test, logreg_pred)
logreg_confidence = logreg.predict_proba(X_test)

print("Logistic Regression Classifier:")
print("Accuracy on test set: {:.2f}%".format(logreg_acc * 100))

# Print confidence scores for Logistic Regression predictions
print("Confidence scores for Logistic Regression predictions:")
print(logreg_confidence)

tree = DecisionTreeClassifier()
tree.fit(X_train, y_train)
tree_pred = tree.predict(X_test)
tree_acc = accuracy_score(y_test, tree_pred)

print("Decision Tree Classifier:")
print("Accuracy on test set: {:.2f}%".format(tree_acc * 100))

"""### Selecting 90 features"""

feature_scores, top_features = relief(X, y,k=5,num_features=90)
print("Top features:", df.columns[top_features])

df_rilief_90=df.loc[:,['itching', 'irritability', 'depression', 'toxic_look_(typhos)',
       'internal_itching', 'passage_of_gases', 'continuous_feel_of_urine',
       'foul_smell_of urine', 'bladder_discomfort', 'loss_of_smell',
       'weakness_of_one_body_side', 'unsteadiness', 'loss_of_balance',
       'spinning_movements', 'movement_stiffness', 'swelling_joints',
       'stiff_neck', 'muscle_weakness', 'hip_joint_pain', 'knee_pain',
       'slurred_speech', 'drying_and_tingling_lips', 'extra_marital_contacts',
       'excessive_hunger', 'swollen_extremeties', 'brittle_nails',
       'enlarged_thyroid', 'puffy_face_and_eyes', 'swollen_blood_vessels',
       'swollen_legs', 'muscle_pain', 'obesity', 'altered_sensorium',
       'belly_pain', 'blister', 'inflammatory_nails', 'small_dents_in_nails',
       'silver_like_dusting', 'skin_peeling', 'scurring', 'blackheads',
       'pus_filled_pimples', 'painful_walking', 'palpitations',
       'prominent_veins_on_calf', 'blood_in_sputum', 'fluid_overload.1',
       'history_of_alcohol_consumption', 'distention_of_abdomen',
       'stomach_bleeding', 'coma', 'receiving_unsterile_injections',
       'receiving_blood_transfusion', 'visual_disturbances',
       'lack_of_concentration', 'rusty_sputum', 'mucoid_sputum',
       'family_history', 'polyuria', 'increased_appetite',
       'watering_from_eyes', 'dischromic _patches', 'abnormal_menstruation',
       'red_spots_over_body', 'bruising', 'cramps', 'dizziness', 'dehydration',
       'sweating', 'breathlessness', 'sunken_eyes', 'high_fever', 'cough',
       'irregular_sugar_level', 'patches_in_throat', 'lethargy',
       'restlessness', 'weight_loss', 'mood_swings', 'cold_hands_and_feets',
       'anxiety', 'weight_gain', 'fatigue', 'spotting_ urination',
       'burning_micturition', 'vomiting', 'muscle_wasting', 'ulcers_on_tongue',
       'acidity', 'stomach_pain']]

clf = svm.SVC(kernel='linear', C=1)
X_train, X_test, y_train, y_test = train_test_split(df_rilief_90, y, test_size=0.3, random_state=0)
clf.fit(X_train, y_train)
y_pred = clf.predict(X_test)

print("Accuracy: ",clf.score(X_test,y_test))

forest = RandomForestClassifier()
X_train, X_test, y_train, y_test = train_test_split(df_rilief_90, y, test_size=0.3, random_state=0)
forest.fit(X_train, y_train)
forest_pred = forest.predict(X_test)
forest_acc = accuracy_score(y_test, forest_pred)

print("Random Forest Classifier:")
print("Accuracy on test set: {:.2f}%".format(forest_acc * 100))

logreg = LogisticRegression()
logreg.fit(X_train, y_train)
logreg_pred = logreg.predict(X_test)
logreg_acc = accuracy_score(y_test, logreg_pred)
logreg_confidence = logreg.predict_proba(X_test)

print("Logistic Regression Classifier:")
print("Accuracy on test set: {:.2f}%".format(logreg_acc * 100))

# Print confidence scores for Logistic Regression predictions
print("Confidence scores for Logistic Regression predictions:")
print(logreg_confidence)

tree = DecisionTreeClassifier()
tree.fit(X_train, y_train)
tree_pred = tree.predict(X_test)
tree_acc = accuracy_score(y_test, tree_pred)

print("Decision Tree Classifier:")
print("Accuracy on test set: {:.2f}%".format(tree_acc * 100))

"""### Selecting 100 features"""

feature_scores, top_features = relief(X, y,k=5,num_features=100)
print("Top features:", df.columns[top_features])

df_rilief_100=df.loc[:,['itching', 'irritability', 'depression', 'toxic_look_(typhos)',
       'internal_itching', 'passage_of_gases', 'continuous_feel_of_urine',
       'foul_smell_of urine', 'bladder_discomfort', 'loss_of_smell',
       'weakness_of_one_body_side', 'unsteadiness', 'loss_of_balance',
       'spinning_movements', 'movement_stiffness', 'swelling_joints',
       'stiff_neck', 'muscle_weakness', 'hip_joint_pain', 'knee_pain',
       'slurred_speech', 'drying_and_tingling_lips', 'extra_marital_contacts',
       'excessive_hunger', 'swollen_extremeties', 'brittle_nails',
       'enlarged_thyroid', 'puffy_face_and_eyes', 'swollen_blood_vessels',
       'swollen_legs', 'muscle_pain', 'obesity', 'altered_sensorium',
       'belly_pain', 'blister', 'inflammatory_nails', 'small_dents_in_nails',
       'silver_like_dusting', 'skin_peeling', 'scurring', 'blackheads',
       'pus_filled_pimples', 'painful_walking', 'palpitations',
       'prominent_veins_on_calf', 'blood_in_sputum', 'fluid_overload.1',
       'history_of_alcohol_consumption', 'distention_of_abdomen',
       'stomach_bleeding', 'coma', 'receiving_unsterile_injections',
       'receiving_blood_transfusion', 'visual_disturbances',
       'lack_of_concentration', 'rusty_sputum', 'mucoid_sputum',
       'family_history', 'polyuria', 'increased_appetite',
       'watering_from_eyes', 'dischromic _patches', 'abnormal_menstruation',
       'red_spots_over_body', 'bruising', 'cramps', 'dizziness', 'dehydration',
       'sweating', 'breathlessness', 'sunken_eyes', 'high_fever', 'cough',
       'irregular_sugar_level', 'patches_in_throat', 'lethargy',
       'restlessness', 'weight_loss', 'mood_swings', 'cold_hands_and_feets',
       'anxiety', 'weight_gain', 'fatigue', 'spotting_ urination',
       'burning_micturition', 'vomiting', 'muscle_wasting', 'ulcers_on_tongue',
       'acidity', 'stomach_pain', 'joint_pain', 'chills', 'shivering',
       'continuous_sneezing', 'nodal_skin_eruptions', 'skin_rash',
       'indigestion', 'headache', 'yellowish_skin', 'dark_urine'] ]

clf = svm.SVC(kernel='linear', C=1)
X_train, X_test, y_train, y_test = train_test_split(df_rilief_100, y, test_size=0.3, random_state=0)
clf.fit(X_train, y_train)
y_pred = clf.predict(X_test)

print("Accuracy: ",clf.score(X_test,y_test))

forest = RandomForestClassifier()
X_train, X_test, y_train, y_test = train_test_split(df_rilief_100, y, test_size=0.3, random_state=0)
forest.fit(X_train, y_train)
forest_pred = forest.predict(X_test)
forest_acc = accuracy_score(y_test, forest_pred)

print("Random Forest Classifier:")
print("Accuracy on test set: {:.2f}%".format(forest_acc * 100))

logreg = LogisticRegression()
logreg.fit(X_train, y_train)
logreg_pred = logreg.predict(X_test)
logreg_acc = accuracy_score(y_test, logreg_pred)
logreg_confidence = logreg.predict_proba(X_test)

print("Logistic Regression Classifier:")
print("Accuracy on test set: {:.2f}%".format(logreg_acc * 100))

# Print confidence scores for Logistic Regression predictions
print("Confidence scores for Logistic Regression predictions:")
print(logreg_confidence)

tree = DecisionTreeClassifier()
tree.fit(X_train, y_train)
tree_pred = tree.predict(X_test)
tree_acc = accuracy_score(y_test, tree_pred)

print("Decision Tree Classifier:")
print("Accuracy on test set: {:.2f}%".format(tree_acc * 100))

import pickle

# Assuming you have a logistic regression model named 'logistic_regression_model'

# Save the model to a file using pickle
with open("logistic_regression_model.pkl", "wb") as file:
    pickle.dump(logreg, file)

# z=[1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
# # Reshape the input data to match the number of features
# z_reshaped = np.array(z).reshape(1, -1)  # Reshape z to have the same number of features as the training data

# logreg_confidence = logreg.predict_proba(z_reshaped)
# print(logreg_confidence)
# logreg_pred = logreg.predict(z_reshaped)
# print(logreg_pred)
# max_confidence = max(logreg_confidence[0])
# print("Maximum confidence:", max_confidence)

import numpy as np
import tensorflow as tf
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# Train the Logistic Regression model
logreg = LogisticRegression()
logreg.fit(X_train, y_train)

# Perform predictions on the test set
logreg_pred = logreg.predict(X_test)
logreg_acc = accuracy_score(y_test, logreg_pred)
logreg_confidence = logreg.predict_proba(X_test)

print("Logistic Regression Classifier:")
print("Accuracy on test set: {:.2f}%".format(logreg_acc * 100))

# Print confidence scores for Logistic Regression predictions
print("Confidence scores for Logistic Regression predictions:")
print(logreg_confidence)

# Convert the Logistic Regression model to TensorFlow format
weights = np.append(logreg.intercept_, logreg.coef_)

# Create a Sequential model in TensorFlow
tf_model = tf.keras.models.Sequential([
    tf.keras.layers.Dense(len(weights), input_shape=(X_train.shape[1],), activation='sigmoid')
])

# Set the weights for the Dense layer
dense_layer = tf_model.layers[0]
dense_layer.set_weights([weights.reshape(len(weights), 1), np.zeros(len(weights))])

# Convert the TensorFlow model to TFLite format
converter = tf.lite.TFLiteConverter.from_keras_model(tf_model)
tflite_model = converter.convert()

# Save the TFLite model to a file
with open('logreg_model.tflite', 'wb') as f:
    f.write(tflite_model)

import pickle
import numpy as np
import tensorflow as tf

# Load the model from the pickle file
with open('/content/logistic_regression_model.pkl', 'rb') as f:
    model = pickle.load(f)

# Example input data for conversion
input_data = np.zeros((1, 10), dtype=np.float32)

# Convert the model to TensorFlow format
tf_model = tf.function(lambda x: model.predict_proba(x))
concrete_func = tf_model.get_concrete_function(tf.TensorSpec(model.shape[1:], model.dtype))
converter = tf.lite.TFLiteConverter.from_concrete_functions([concrete_func])
tflite_model = converter.convert()

# Save the TFLite model to a file
with open('model.tflite', 'wb') as f:
    f.write(tflite_model)

